{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Exam_pb2_MNIST","version":"0.3.2","provenance":[{"file_id":"1pn10aiFzYq9cUau0DTkJzMPnYNgqtnpl","timestamp":1561029340978}],"collapsed_sections":[]},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"}},"cells":[{"cell_type":"markdown","metadata":{"colab_type":"text","id":"y1ESRvSQh7Ow"},"source":["# MNIST Classifier\n","\n","### Data\n","\n","The problem we are trying to solve here is to classify grayscale images of handwritten digits (28 pixels by 28 pixels), into their 10 \n","categories (0 to 9). \n","\n","The dataset we will use is the MNIST dataset. It's a set of 60,000 training images, plus 10,000 test \n"]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"RoZe9cfjh7Oz"},"source":["The MNIST dataset comes pre-loaded in Keras, in the form of a set of four Numpy arrays:"]},{"cell_type":"code","metadata":{"colab_type":"code","id":"V5EEGdqxh7O3","colab":{}},"source":["from keras.datasets import mnist\n","\n","(train_images, train_labels), (test_images, test_labels) = mnist.load_data()"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"50avirtah7PD"},"source":["#<font color='red'>Question 1</font> \n","Print the shape of train and test images and labels"]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"3cqgZvq6h7QH"},"source":["#<font color='red'>Question 2</font> \n","\n","Before training, we will preprocess our data by reshaping it into the shape that the network expects, and scaling it so that all values are in \n","the `[0, 1]` interval. Previously, our training images for instance were stored in an array of shape `(60000, 28, 28)` of type `uint8` with \n","values in the `[0, 255]` interval. We transform it into a `float32` array of shape `(60000, 28 * 28)` with values between 0 and 1.\n","\n","Write the code that performs the above transformation."]},{"cell_type":"code","metadata":{"id":"xFWR572rpT3J","colab_type":"code","colab":{}},"source":["train_images = # Write code to make it (60000, 28*28)\n","train_images = # Write code to make it between (0,1)\n","\n","test_images = # Write code to make it (60000, 28*28)\n","test_images = # Write code to make it between (0,1)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"fqHyVnYEh7QT"},"source":["#<font color='red'>Question 3</font> \n","We also need to categorically encode the labels. \n"]},{"cell_type":"code","metadata":{"colab_type":"code","id":"5Z5KYaJPh7QW","colab":{}},"source":["\n","\n","train_labels = # write code to convert to one hot encoding or categorical\n","test_labels = # write code to convert to one hot encoding or categorical"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"t9DOvj6wh7Qd"},"source":["Our workflow will be as follow: first we will present our neural network with the training data, `train_images` and `train_labels`. The \n","network will then learn to associate images and labels. Finally, we will ask the network to produce predictions for `test_images`, and we \n","will verify if these predictions match the labels from `test_labels`.\n","\n","Let's build our network "]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"1T6GoQVjh7Qf"},"source":["#<font color='red'>Question 4</font> \n","### Model\n","\n","Write Sequential model with the following architecture:\n","- Input=Dense: 512, relu activation\n","- Layer_1=Dense: 256\n"]},{"cell_type":"code","metadata":{"colab_type":"code","id":"iJswxjLFh7Qi","colab":{}},"source":["\n","\n","from keras import models\n","from keras import layers\n","\n","network = models.Sequential()\n","network.add(....)# Write your code here\n","network.add(....)# Write your code here\n"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Gp3edgqBqSJQ","colab_type":"text"},"source":["#<font color='red'>Question 5</font> \n","add to your model the proper output layer for MNIST classification."]},{"cell_type":"code","metadata":{"id":"U5kGTC4YqbCq","colab_type":"code","colab":{}},"source":["network.add(...)# Write you code here"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"gsDAKUSLqnFh","colab_type":"text"},"source":["#<font color='red'>Question 6</font> \n","Print your model parameters"]},{"cell_type":"code","metadata":{"id":"IIASuu3hqmto","colab_type":"code","colab":{}},"source":["# Write your code here"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"bdzFWF4eh7Qs"},"source":["\n","#<font color='red'>Question 7</font> \n","### Compilation: loss + optimizer\n","\n","To make our network ready for training, we need to pick three more things, as part of \"compilation\" step:\n"]},{"cell_type":"markdown","metadata":{"id":"6nScRC1vq6P5","colab_type":"text"},"source":["\n","Now compile your model with the three components"]},{"cell_type":"code","metadata":{"colab_type":"code","id":"-cfRLMyxh7Qv","colab":{}},"source":["network.compile(...)# Write your answer here"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"5gxG_b9Gh7RD"},"source":["#<font color='red'>Question 8</font> \n","### Learning"]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"ApnI_EVFh7RJ"},"source":["We are now ready to train our network, which in Keras is done via a call to the `fit` method of the network: \n","we \"fit\" the model to its training data."]},{"cell_type":"code","metadata":{"colab_type":"code","id":"3A0LkzQnh7RL","colab":{}},"source":["network.... # Write your answer here"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"m4zRGeKgh7RT"},"source":["#<font color='red'>Question 9</font> \n","Now we want to evaluate our model on the test data.\n","\n","Write the code to give you the accuracy and loss on test data:"]},{"cell_type":"code","metadata":{"colab_type":"code","id":"3rRATWsLh7RV","colab":{}},"source":["test_loss, test_acc = # Write your code here"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"lsIJHMPsrtxD","colab_type":"text"},"source":["#<font color='red'>Question 10</font> \n","Now we want to make sample prediction of one image below:"]},{"cell_type":"code","metadata":{"id":"6EQSbwUjB166","colab_type":"code","outputId":"bb689631-aad5-493d-efdb-405caf2ed5df","executionInfo":{"status":"ok","timestamp":1552815775503,"user_tz":-120,"elapsed":1245,"user":{"displayName":"Ahmad El Sallab","photoUrl":"","userId":"06251939449358079201"}},"colab":{"base_uri":"https://localhost:8080/","height":284}},"source":["import matplotlib.pyplot as plt\n","img = test_images[0]\n","plt.imshow(np.reshape(img, (28,28)))\n"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.image.AxesImage at 0x7f4e90e529e8>"]},"metadata":{"tags":[]},"execution_count":85},{"output_type":"display_data","data":{"image/png":"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\nMOhSAv8Hz9SiSEO4MFYAAAAASUVORK5CYII=\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"id":"LNG-Y_hYC10f","colab_type":"code","outputId":"5dc2cc12-bfd6-498f-ea56-6381314fbb2b","executionInfo":{"status":"ok","timestamp":1552815973950,"user_tz":-120,"elapsed":854,"user":{"displayName":"Ahmad El Sallab","photoUrl":"","userId":"06251939449358079201"}},"colab":{"base_uri":"https://localhost:8080/","height":72}},"source":["# Write the code here to print the digit name as predicted by the model"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[0.07699326, 0.07023557, 0.09060565, 0.1736434 , 0.07890654,\n","        0.09350489, 0.08068074, 0.09926819, 0.09897252, 0.13718927]],\n","      dtype=float32)"]},"metadata":{"tags":[]},"execution_count":93}]},{"cell_type":"markdown","metadata":{"id":"IBR77Ps_nIRo","colab_type":"text"},"source":["#<font color='red'>Question 11</font> \n","In Keras convention, which axis is always the samples axis. As you can see above, the train images is (60000, 784).\n","\n","Suppose that we have obtain the `train_images` variable as (784,60000) instead.\n","\n","How can we fix it?"]},{"cell_type":"code","metadata":{"id":"CpMQVbBlnzOr","colab_type":"code","colab":{}},"source":["import numpy as np\n","bad_train_images = np.zeros((784,60000)) # This is the bad data matrix\n","print(bad_train_images.shape)\n","# Can you type one line of code to fix it?\n","train_images = ....# Type your answer here\n","print(train_images.shape)"],"execution_count":0,"outputs":[]}]}